// generated 2003/1/7 19:34:04 CET by sky@dreadnought.(none)
// using glademm V1.1.3c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/sky/c/webcam/src/control/gtkwebcamcontrol.glade
// for gtk 2.1.3 and gtkmm 2.1.0
//
// Please modify the corresponding derived classes in ././ControlWindow.cc

#include "config.h"
#include "ControlWindow_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/label.h>
#include <gtkmm/entry.h>
#include <gtkmm/box.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/image.h>
#include <gtkmm/imagemenuitem.h>
#include <gtk/gtkimagemenuitem.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/separator.h>
#include <gtkmm/optionmenu.h>
#include <gtkmm/table.h>
#include <gtkmm/alignment.h>
#include <gtkmm/checkbutton.h>
#include <gtkmm/scale.h>
#include <gtkmm/button.h>
#include <gtkmm/notebook.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/statusbar.h>

ControlWindow_glade::ControlWindow_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *ControlWindow = this;
   _data = new GlademmData(get_accel_group());
   
   Gtk::Label *Heading_label = Gtk::manage(new class Gtk::Label("Gtk-Webcam"));
   Gtk::Label *label30 = Gtk::manage(new class Gtk::Label("Device Node: "));
   Gtk::Entry *entry1 = Gtk::manage(new class Gtk::Entry());
   Gtk::HBox *hbox18 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label31 = Gtk::manage(new class Gtk::Label("Device Name: "));
   Gtk::Label *label32 = Gtk::manage(new class Gtk::Label("<not implemented yet>"));
   Gtk::HBox *hbox19 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label33 = Gtk::manage(new class Gtk::Label("Resolution: "));
   Gtk::MenuItem *item_res_sqcif = NULL;
   Gtk::MenuItem *item_res_qsif = NULL;
   Gtk::MenuItem *item_res_qcif = NULL;
   Gtk::MenuItem *item_res_sif = NULL;
   Gtk::MenuItem *item_res_cif = NULL;
   Gtk::MenuItem *item_res_vga = NULL;
   Gtk::Menu *menu2 = Gtk::manage(new class Gtk::Menu());
   menu_resolution_preview = Gtk::manage(new class Gtk::OptionMenu());
   
   Gtk::HBox *hbox20 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label34 = Gtk::manage(new class Gtk::Label("Preview Size: "));
   Gtk::Image *image10 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-zoom-out"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *size_half = NULL;
   Gtk::Image *image11 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-zoom-100"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *size_original = NULL;
   Gtk::Image *image12 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-zoom-in"), Gtk::IconSize(1)));
   Gtk::ImageMenuItem *size_double = NULL;
   Gtk::Menu *menu3 = Gtk::manage(new class Gtk::Menu());
   menu_resolution_snapshot = Gtk::manage(new class Gtk::OptionMenu());
   
   Gtk::HBox *hbox21 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label36 = Gtk::manage(new class Gtk::Label("Brightness:"));
   Gtk::Adjustment *brightness_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   brightness = Gtk::manage(new class Gtk::HScale(*brightness_adj));
   
   Gtk::HBox *hbox23 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label37 = Gtk::manage(new class Gtk::Label("Color:"));
   Gtk::Adjustment *color_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   color = Gtk::manage(new class Gtk::HScale(*color_adj));
   
   Gtk::HBox *hbox24 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label38 = Gtk::manage(new class Gtk::Label("Contrast:"));
   Gtk::Adjustment *contrast_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   contrast = Gtk::manage(new class Gtk::HScale(*contrast_adj));
   
   Gtk::HBox *hbox25 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label39 = Gtk::manage(new class Gtk::Label("Hue:"));
   Gtk::Adjustment *hue_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   hue = Gtk::manage(new class Gtk::HScale(*hue_adj));
   
   Gtk::HBox *hbox26 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::HSeparator *hseparator1 = Gtk::manage(new class Gtk::HSeparator());
   Gtk::HSeparator *hseparator3 = Gtk::manage(new class Gtk::HSeparator());
   backlightcompensation = Gtk::manage(new class Gtk::CheckButton("Backlight Compensation"));
   
   Gtk::Label *label47 = Gtk::manage(new class Gtk::Label("Dynamic Noise Reduction:"));
   Gtk::MenuItem *dynnoise_none = NULL;
   Gtk::MenuItem *dynnoise_low = NULL;
   Gtk::MenuItem *dynnoise_medium = NULL;
   Gtk::MenuItem *dynnoise_high = NULL;
   Gtk::Menu *menu7 = Gtk::manage(new class Gtk::Menu());
   Gtk::OptionMenu *optionmenu5 = Gtk::manage(new class Gtk::OptionMenu());
   Gtk::HBox *hbox34 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::HSeparator *hseparator4 = Gtk::manage(new class Gtk::HSeparator());
   Gtk::Table *table1 = Gtk::manage(new class Gtk::Table(2, 2, true));
   Gtk::Label *label_basic_adjustments = Gtk::manage(new class Gtk::Label("Basic Adjustments"));
   Gtk::Label *label40 = Gtk::manage(new class Gtk::Label("Whiteness/Gamma:"));
   Gtk::Adjustment *gamma_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   gamma = Gtk::manage(new class Gtk::HScale(*gamma_adj));
   
   Gtk::HBox *hbox27 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label41 = Gtk::manage(new class Gtk::Label("Compression Level:"));
   Gtk::MenuItem *menuitem7 = NULL;
   Gtk::MenuItem *menuitem8 = NULL;
   Gtk::MenuItem *menuitem9 = NULL;
   Gtk::MenuItem *menuitem10 = NULL;
   Gtk::Menu *menu6 = Gtk::manage(new class Gtk::Menu());
   Gtk::OptionMenu *optionmenu4 = Gtk::manage(new class Gtk::OptionMenu());
   Gtk::Alignment *alignment9 = Gtk::manage(new class Gtk::Alignment());
   Gtk::HBox *hbox28 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label42 = Gtk::manage(new class Gtk::Label("Gain Level:"));
   Gtk::CheckButton *checkbutton2 = Gtk::manage(new class Gtk::CheckButton("Automatic"));
   Gtk::Adjustment *hscale6_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   Gtk::HScale *hscale6 = Gtk::manage(new class Gtk::HScale(*hscale6_adj));
   Gtk::HBox *hbox29 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label43 = Gtk::manage(new class Gtk::Label("Exposure Time:"));
   Gtk::CheckButton *checkbutton3 = Gtk::manage(new class Gtk::CheckButton("Automatic"));
   Gtk::Adjustment *hscale7_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   Gtk::HScale *hscale7 = Gtk::manage(new class Gtk::HScale(*hscale7_adj));
   Gtk::HBox *hbox30 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label44 = Gtk::manage(new class Gtk::Label("White Balance:"));
   Gtk::MenuItem *wb_automatic = NULL;
   Gtk::MenuItem *wb_manual = NULL;
   Gtk::MenuItem *wb_indoor = NULL;
   Gtk::MenuItem *wb_outdoor = NULL;
   Gtk::MenuItem *wb_flashlight = NULL;
   Gtk::Menu *menu5 = Gtk::manage(new class Gtk::Menu());
   Gtk::OptionMenu *optionmenu3 = Gtk::manage(new class Gtk::OptionMenu());
   Gtk::Alignment *alignment10 = Gtk::manage(new class Gtk::Alignment());
   Gtk::Label *label45 = Gtk::manage(new class Gtk::Label("Red:"));
   Gtk::Adjustment *hscale8_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   Gtk::HScale *hscale8 = Gtk::manage(new class Gtk::HScale(*hscale8_adj));
   Gtk::HBox *hbox32 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::Label *label46 = Gtk::manage(new class Gtk::Label("Blue:"));
   Gtk::Adjustment *hscale9_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   Gtk::HScale *hscale9 = Gtk::manage(new class Gtk::HScale(*hscale9_adj));
   Gtk::HBox *hbox33 = Gtk::manage(new class Gtk::HBox(false, 5));
   Gtk::VBox *vbox6 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::HBox *hbox31 = Gtk::manage(new class Gtk::HBox(false, 10));
   flickercompensation = Gtk::manage(new class Gtk::CheckButton("Flicker Compensation"));
   
   Gtk::Table *table2 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::VBox *vbox5 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label_advanced_adjustments = Gtk::manage(new class Gtk::Label("Advanced Adjustments"));
   Gtk::Label *label_save_dir = Gtk::manage(new class Gtk::Label("Save snaphots to directory: "));
   Gtk::Entry *save_directory = Gtk::manage(new class Gtk::Entry());
   Gtk::Image *image5 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-open"), Gtk::IconSize(4)));
   Gtk::Label *label11 = Gtk::manage(new class Gtk::Label("Choose..."));
   Gtk::HBox *hbox7 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment6 = Gtk::manage(new class Gtk::Alignment());
   Gtk::Button *button1 = Gtk::manage(new class Gtk::Button());
   Gtk::HBox *hbox6 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox3 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label_image_saving_properties = Gtk::manage(new class Gtk::Label("Image Saving Properties"));
   Gtk::Notebook *notebook1 = Gtk::manage(new class Gtk::Notebook());
   Gtk::Image *image2 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-apply"), Gtk::IconSize(4)));
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label("Save Settings"));
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment2 = Gtk::manage(new class Gtk::Alignment());
   Gtk::Button *button_save_settings = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-refresh"), Gtk::IconSize(4)));
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label("Reload Settings"));
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment3 = Gtk::manage(new class Gtk::Alignment());
   Gtk::Button *button_restore_settings = Gtk::manage(new class Gtk::Button());
   Gtk::Image *image4 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-revert-to-saved"), Gtk::IconSize(4)));
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label("Restore Factory Defaults"));
   Gtk::HBox *hbox4 = Gtk::manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment4 = Gtk::manage(new class Gtk::Alignment());
   Gtk::Button *button_restore_defaults = Gtk::manage(new class Gtk::Button());
   Gtk::Button *button_quit = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-quit")));
   Gtk::HButtonBox *Lower_hbuttonbox = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_SPREAD, 0));
   Gtk::Statusbar *Main_statusbar = Gtk::manage(new class Gtk::Statusbar());
   Gtk::VBox *MainVBox = Gtk::manage(new class Gtk::VBox(false, 0));
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("sQCIF (128x96)"));
   item_res_sqcif = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("QSIF (160x120)"));
   item_res_qsif = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("QCIF (176x144)"));
   item_res_qcif = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("SIF (320x240)"));
   item_res_sif = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("CIF (352x288)"));
   item_res_cif = (Gtk::MenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::MenuElem("VGA (640x480)"));
   item_res_vga = (Gtk::MenuItem *)&menu2->items().back();
   
   menu3->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("50%", *image10));
   size_half = (Gtk::ImageMenuItem *)&menu3->items().back();
   
   menu3->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("100%", *image11));
   size_original = (Gtk::ImageMenuItem *)&menu3->items().back();
   
   menu3->items().push_back(Gtk::Menu_Helpers::ImageMenuElem("200%", *image12));
   size_double = (Gtk::ImageMenuItem *)&menu3->items().back();
   
   menu7->items().push_back(Gtk::Menu_Helpers::MenuElem("None"));
   dynnoise_none = (Gtk::MenuItem *)&menu7->items().back();
   
   menu7->items().push_back(Gtk::Menu_Helpers::MenuElem("Low"));
   dynnoise_low = (Gtk::MenuItem *)&menu7->items().back();
   
   menu7->items().push_back(Gtk::Menu_Helpers::MenuElem("Medium"));
   dynnoise_medium = (Gtk::MenuItem *)&menu7->items().back();
   
   menu7->items().push_back(Gtk::Menu_Helpers::MenuElem("High"));
   dynnoise_high = (Gtk::MenuItem *)&menu7->items().back();
   
   menu6->items().push_back(Gtk::Menu_Helpers::MenuElem("None"));
   menuitem7 = (Gtk::MenuItem *)&menu6->items().back();
   
   menu6->items().push_back(Gtk::Menu_Helpers::MenuElem("Low"));
   menuitem8 = (Gtk::MenuItem *)&menu6->items().back();
   
   menu6->items().push_back(Gtk::Menu_Helpers::MenuElem("Medium"));
   menuitem9 = (Gtk::MenuItem *)&menu6->items().back();
   
   menu6->items().push_back(Gtk::Menu_Helpers::MenuElem("High"));
   menuitem10 = (Gtk::MenuItem *)&menu6->items().back();
   
   menu5->items().push_back(Gtk::Menu_Helpers::MenuElem("Automatic"));
   wb_automatic = (Gtk::MenuItem *)&menu5->items().back();
   
   menu5->items().push_back(Gtk::Menu_Helpers::MenuElem("Manual"));
   wb_manual = (Gtk::MenuItem *)&menu5->items().back();
   
   menu5->items().push_back(Gtk::Menu_Helpers::MenuElem("Indoor"));
   wb_indoor = (Gtk::MenuItem *)&menu5->items().back();
   
   menu5->items().push_back(Gtk::Menu_Helpers::MenuElem("Outdoor"));
   wb_outdoor = (Gtk::MenuItem *)&menu5->items().back();
   
   menu5->items().push_back(Gtk::Menu_Helpers::MenuElem("Flashlight"));
   wb_flashlight = (Gtk::MenuItem *)&menu5->items().back();
   Heading_label->set_alignment(0.5,0.5);
   Heading_label->set_padding(0,0);
   Heading_label->set_justify(Gtk::JUSTIFY_CENTER);
   Heading_label->set_line_wrap(false);
   Heading_label->set_use_markup(false);
   label30->set_alignment(0.5,0.5);
   label30->set_padding(0,0);
   label30->set_justify(Gtk::JUSTIFY_LEFT);
   label30->set_line_wrap(false);
   label30->set_use_markup(false);
   entry1->set_flags(Gtk::CAN_FOCUS);
   entry1->set_editable(true);
   entry1->set_text("/dev/video0");
   hbox18->pack_start(*label30, Gtk::PACK_SHRINK, 0);
   hbox18->pack_start(*entry1);
   label31->set_alignment(0.5,0.5);
   label31->set_padding(0,0);
   label31->set_justify(Gtk::JUSTIFY_LEFT);
   label31->set_line_wrap(false);
   label31->set_use_markup(false);
   label32->set_alignment(0.5,0.5);
   label32->set_padding(0,0);
   label32->set_justify(Gtk::JUSTIFY_LEFT);
   label32->set_line_wrap(false);
   label32->set_use_markup(false);
   hbox19->pack_start(*label31, Gtk::PACK_SHRINK, 0);
   hbox19->pack_start(*label32, Gtk::PACK_SHRINK, 0);
   label33->set_alignment(0.5,0.5);
   label33->set_padding(0,0);
   label33->set_justify(Gtk::JUSTIFY_LEFT);
   label33->set_line_wrap(false);
   label33->set_use_markup(false);
   menu_resolution_preview->set_flags(Gtk::CAN_FOCUS);
   menu_resolution_preview->set_history(0);
   menu_resolution_preview->set_menu(*menu2);
   hbox20->pack_start(*label33, Gtk::PACK_SHRINK, 0);
   hbox20->pack_start(*menu_resolution_preview, Gtk::PACK_SHRINK, 0);
   label34->set_alignment(0.5,0.5);
   label34->set_padding(0,0);
   label34->set_justify(Gtk::JUSTIFY_LEFT);
   label34->set_line_wrap(false);
   label34->set_use_markup(false);
   image10->set_alignment(0.5,0.5);
   image10->set_padding(0,0);
   image11->set_alignment(0.5,0.5);
   image11->set_padding(0,0);
   image12->set_alignment(0.5,0.5);
   image12->set_padding(0,0);
   menu_resolution_snapshot->set_flags(Gtk::CAN_FOCUS);
   menu_resolution_snapshot->set_history(0);
   menu_resolution_snapshot->set_menu(*menu3);
   hbox21->pack_start(*label34, Gtk::PACK_SHRINK, 0);
   hbox21->pack_start(*menu_resolution_snapshot, Gtk::PACK_SHRINK, 0);
   label36->set_alignment(0.5,0.5);
   label36->set_padding(0,0);
   label36->set_justify(Gtk::JUSTIFY_LEFT);
   label36->set_line_wrap(false);
   label36->set_use_markup(true);
   brightness->set_flags(Gtk::CAN_FOCUS);
   brightness->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   brightness->set_digits(4);
   brightness->set_draw_value(true);
   brightness->set_value_pos(Gtk::POS_LEFT);
   hbox23->pack_start(*label36, Gtk::PACK_SHRINK, 0);
   hbox23->pack_start(*brightness);
   label37->set_alignment(0.5,0.5);
   label37->set_padding(0,0);
   label37->set_justify(Gtk::JUSTIFY_LEFT);
   label37->set_line_wrap(false);
   label37->set_use_markup(true);
   color->set_flags(Gtk::CAN_FOCUS);
   color->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   color->set_digits(0);
   color->set_draw_value(false);
   color->set_value_pos(Gtk::POS_TOP);
   hbox24->pack_start(*label37, Gtk::PACK_SHRINK, 0);
   hbox24->pack_start(*color);
   label38->set_alignment(0.5,0.5);
   label38->set_padding(0,0);
   label38->set_justify(Gtk::JUSTIFY_LEFT);
   label38->set_line_wrap(false);
   label38->set_use_markup(true);
   contrast->set_flags(Gtk::CAN_FOCUS);
   contrast->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   contrast->set_digits(0);
   contrast->set_draw_value(false);
   contrast->set_value_pos(Gtk::POS_TOP);
   hbox25->pack_start(*label38, Gtk::PACK_SHRINK, 0);
   hbox25->pack_start(*contrast);
   label39->set_alignment(0.5,0.5);
   label39->set_padding(0,0);
   label39->set_justify(Gtk::JUSTIFY_LEFT);
   label39->set_line_wrap(false);
   label39->set_use_markup(true);
   hue->set_flags(Gtk::CAN_FOCUS);
   hue->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   hue->set_digits(0);
   hue->set_draw_value(false);
   hue->set_value_pos(Gtk::POS_TOP);
   hbox26->pack_start(*label39, Gtk::PACK_SHRINK, 0);
   hbox26->pack_start(*hue);
   backlightcompensation->set_flags(Gtk::CAN_FOCUS);
   backlightcompensation->set_relief(Gtk::RELIEF_NORMAL);
   backlightcompensation->set_mode(false);
   backlightcompensation->set_active(false);
   label47->set_alignment(0.5,0.5);
   label47->set_padding(0,0);
   label47->set_justify(Gtk::JUSTIFY_LEFT);
   label47->set_line_wrap(false);
   label47->set_use_markup(false);
   optionmenu5->set_flags(Gtk::CAN_FOCUS);
   optionmenu5->set_history(0);
   optionmenu5->set_menu(*menu7);
   hbox34->pack_start(*label47, Gtk::PACK_SHRINK, 0);
   hbox34->pack_start(*optionmenu5, Gtk::PACK_SHRINK, 0);
   table1->set_row_spacings(0);
   table1->set_col_spacings(15);
   table1->attach(*hbox18, 0, 1, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table1->attach(*hbox19, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*hbox20, 0, 1, 2, 3, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table1->attach(*hbox21, 1, 2, 2, 3, Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*hbox23, 0, 1, 4, 5, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table1->attach(*hbox24, 1, 2, 4, 5, Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*hbox25, 0, 1, 5, 6, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table1->attach(*hbox26, 1, 2, 5, 6, Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*hseparator1, 0, 2, 3, 4, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table1->attach(*hseparator3, 0, 2, 6, 7, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table1->attach(*backlightcompensation, 0, 1, 7, 8, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*hbox34, 1, 2, 7, 8, Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*hseparator4, 0, 2, 1, 2, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   label_basic_adjustments->set_alignment(0.5,0.5);
   label_basic_adjustments->set_padding(0,0);
   label_basic_adjustments->set_justify(Gtk::JUSTIFY_LEFT);
   label_basic_adjustments->set_line_wrap(false);
   label_basic_adjustments->set_use_markup(false);
   label40->set_alignment(0.5,0.5);
   label40->set_padding(0,0);
   label40->set_justify(Gtk::JUSTIFY_LEFT);
   label40->set_line_wrap(false);
   label40->set_use_markup(false);
   gamma->set_flags(Gtk::CAN_FOCUS);
   gamma->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   gamma->set_digits(1);
   gamma->set_draw_value(false);
   gamma->set_value_pos(Gtk::POS_TOP);
   hbox27->pack_start(*label40, Gtk::PACK_SHRINK, 0);
   hbox27->pack_start(*gamma);
   label41->set_alignment(0.5,0.5);
   label41->set_padding(0,0);
   label41->set_justify(Gtk::JUSTIFY_LEFT);
   label41->set_line_wrap(false);
   label41->set_use_markup(false);
   optionmenu4->set_flags(Gtk::CAN_FOCUS);
   optionmenu4->set_history(0);
   optionmenu4->set_menu(*menu6);
   alignment9->add(*optionmenu4);
   hbox28->pack_start(*label41, Gtk::PACK_SHRINK, 0);
   hbox28->pack_start(*alignment9, Gtk::PACK_SHRINK, 0);
   label42->set_alignment(0.5,0.5);
   label42->set_padding(0,0);
   label42->set_justify(Gtk::JUSTIFY_LEFT);
   label42->set_line_wrap(false);
   label42->set_use_markup(false);
   checkbutton2->set_flags(Gtk::CAN_FOCUS);
   checkbutton2->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton2->set_mode(true);
   checkbutton2->set_active(false);
   hscale6->set_sensitive(false);
   hscale6->set_flags(Gtk::CAN_FOCUS);
   hscale6->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   hscale6->set_digits(1);
   hscale6->set_draw_value(false);
   hscale6->set_value_pos(Gtk::POS_TOP);
   hbox29->pack_start(*label42, Gtk::PACK_SHRINK, 0);
   hbox29->pack_start(*checkbutton2, Gtk::PACK_SHRINK, 0);
   hbox29->pack_start(*hscale6);
   label43->set_alignment(0.5,0.5);
   label43->set_padding(0,0);
   label43->set_justify(Gtk::JUSTIFY_LEFT);
   label43->set_line_wrap(false);
   label43->set_use_markup(false);
   checkbutton3->set_flags(Gtk::CAN_FOCUS);
   checkbutton3->set_relief(Gtk::RELIEF_NORMAL);
   checkbutton3->set_mode(true);
   checkbutton3->set_active(false);
   hscale7->set_sensitive(false);
   hscale7->set_flags(Gtk::CAN_FOCUS);
   hscale7->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   hscale7->set_digits(1);
   hscale7->set_draw_value(false);
   hscale7->set_value_pos(Gtk::POS_TOP);
   hbox30->pack_start(*label43, Gtk::PACK_SHRINK, 0);
   hbox30->pack_start(*checkbutton3, Gtk::PACK_SHRINK, 0);
   hbox30->pack_start(*hscale7);
   label44->set_alignment(0.5,0.5);
   label44->set_padding(0,0);
   label44->set_justify(Gtk::JUSTIFY_LEFT);
   label44->set_line_wrap(false);
   label44->set_use_markup(false);
   optionmenu3->set_flags(Gtk::CAN_FOCUS);
   optionmenu3->set_history(0);
   optionmenu3->set_menu(*menu5);
   alignment10->add(*optionmenu3);
   label45->set_alignment(0.5,0.5);
   label45->set_padding(0,0);
   label45->set_justify(Gtk::JUSTIFY_LEFT);
   label45->set_line_wrap(false);
   label45->set_use_markup(false);
   hscale8->set_flags(Gtk::CAN_FOCUS);
   hscale8->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   hscale8->set_digits(1);
   hscale8->set_draw_value(false);
   hscale8->set_value_pos(Gtk::POS_TOP);
   hbox32->pack_start(*label45, Gtk::PACK_SHRINK, 0);
   hbox32->pack_start(*hscale8);
   label46->set_alignment(0.5,0.5);
   label46->set_padding(0,0);
   label46->set_justify(Gtk::JUSTIFY_LEFT);
   label46->set_line_wrap(false);
   label46->set_use_markup(false);
   hscale9->set_flags(Gtk::CAN_FOCUS);
   hscale9->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   hscale9->set_digits(1);
   hscale9->set_draw_value(false);
   hscale9->set_value_pos(Gtk::POS_TOP);
   hbox33->pack_start(*label46, Gtk::PACK_SHRINK, 0);
   hbox33->pack_start(*hscale9);
   vbox6->pack_start(*hbox32);
   vbox6->pack_start(*hbox33);
   hbox31->pack_start(*label44, Gtk::PACK_SHRINK, 0);
   hbox31->pack_start(*alignment10, Gtk::PACK_SHRINK, 0);
   hbox31->pack_start(*vbox6);
   flickercompensation->set_flags(Gtk::CAN_FOCUS);
   flickercompensation->set_relief(Gtk::RELIEF_NORMAL);
   flickercompensation->set_mode(true);
   flickercompensation->set_active(false);
   table2->set_row_spacings(0);
   table2->set_col_spacings(15);
   table2->attach(*hbox27, 0, 1, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table2->attach(*hbox28, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table2->attach(*hbox29, 0, 1, 1, 2, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table2->attach(*hbox30, 1, 2, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
   table2->attach(*hbox31, 0, 1, 2, 3, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table2->attach(*flickercompensation, 1, 2, 2, 3, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   vbox5->pack_start(*table2);
   label_advanced_adjustments->set_alignment(0.5,0.5);
   label_advanced_adjustments->set_padding(0,0);
   label_advanced_adjustments->set_justify(Gtk::JUSTIFY_LEFT);
   label_advanced_adjustments->set_line_wrap(false);
   label_advanced_adjustments->set_use_markup(false);
   label_save_dir->set_alignment(0.5,0.5);
   label_save_dir->set_padding(0,0);
   label_save_dir->set_justify(Gtk::JUSTIFY_LEFT);
   label_save_dir->set_line_wrap(false);
   label_save_dir->set_use_markup(false);
   save_directory->set_flags(Gtk::CAN_FOCUS);
   save_directory->grab_focus();
   save_directory->set_editable(true);
   save_directory->set_text("~/images/");
   image5->set_alignment(0.5,0.5);
   image5->set_padding(0,0);
   label11->set_alignment(0.5,0.5);
   label11->set_padding(0,0);
   label11->set_justify(Gtk::JUSTIFY_LEFT);
   label11->set_line_wrap(false);
   label11->set_use_markup(false);
   hbox7->pack_start(*image5, Gtk::PACK_SHRINK, 0);
   hbox7->pack_start(*label11, Gtk::PACK_SHRINK, 0);
   alignment6->add(*hbox7);
   button1->set_flags(Gtk::CAN_FOCUS);
   button1->set_relief(Gtk::RELIEF_NORMAL);
   button1->add(*alignment6);
   hbox6->pack_start(*label_save_dir, Gtk::PACK_SHRINK, 4);
   hbox6->pack_start(*save_directory, Gtk::PACK_EXPAND_WIDGET, 4);
   hbox6->pack_start(*button1, Gtk::PACK_SHRINK, 4);
   vbox3->pack_start(*hbox6, Gtk::PACK_EXPAND_PADDING, 0);
   label_image_saving_properties->set_alignment(0.5,0.5);
   label_image_saving_properties->set_padding(0,0);
   label_image_saving_properties->set_justify(Gtk::JUSTIFY_LEFT);
   label_image_saving_properties->set_line_wrap(false);
   label_image_saving_properties->set_use_markup(false);
   notebook1->set_flags(Gtk::CAN_FOCUS);
   notebook1->set_border_width(1);
   notebook1->set_show_tabs(true);
   notebook1->set_show_border(true);
   notebook1->set_tab_pos(Gtk::POS_TOP);
   notebook1->set_scrollable(false);
   notebook1->append_page(*table1, *label_basic_adjustments);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*vbox5, *label_advanced_adjustments);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*vbox3, *label_image_saving_properties);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   image2->set_alignment(0.5,0.5);
   image2->set_padding(0,0);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(false);
   hbox2->pack_start(*image2, Gtk::PACK_SHRINK, 0);
   hbox2->pack_start(*label2, Gtk::PACK_SHRINK, 0);
   alignment2->add(*hbox2);
   button_save_settings->set_flags(Gtk::CAN_FOCUS);
   button_save_settings->set_border_width(1);
   button_save_settings->set_relief(Gtk::RELIEF_NORMAL);
   button_save_settings->add(*alignment2);
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   hbox3->pack_start(*image3, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   alignment3->add(*hbox3);
   button_restore_settings->set_flags(Gtk::CAN_FOCUS);
   button_restore_settings->set_border_width(1);
   button_restore_settings->set_relief(Gtk::RELIEF_NORMAL);
   button_restore_settings->add(*alignment3);
   image4->set_alignment(0.5,0.5);
   image4->set_padding(0,0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   hbox4->pack_start(*image4, Gtk::PACK_SHRINK, 0);
   hbox4->pack_start(*label4, Gtk::PACK_SHRINK, 0);
   alignment4->add(*hbox4);
   button_restore_defaults->set_flags(Gtk::CAN_FOCUS);
   button_restore_defaults->set_border_width(1);
   button_restore_defaults->set_relief(Gtk::RELIEF_NORMAL);
   button_restore_defaults->add(*alignment4);
   button_quit->set_flags(Gtk::CAN_FOCUS);
   button_quit->set_border_width(1);
   button_quit->set_relief(Gtk::RELIEF_NORMAL);
   Lower_hbuttonbox->pack_start(*button_save_settings);
   Lower_hbuttonbox->pack_start(*button_restore_settings);
   Lower_hbuttonbox->pack_start(*button_restore_defaults);
   Lower_hbuttonbox->pack_start(*button_quit);
   MainVBox->pack_start(*Heading_label, Gtk::PACK_SHRINK, 0);
   MainVBox->pack_start(*notebook1);
   MainVBox->pack_start(*Lower_hbuttonbox, Gtk::PACK_SHRINK, 0);
   MainVBox->pack_start(*Main_statusbar, Gtk::PACK_SHRINK, 0);
   ControlWindow->set_border_width(1);
   ControlWindow->set_title("Webcam Controls");
   ControlWindow->set_modal(false);
   ControlWindow->property_window_position().set_value(Gtk::WIN_POS_NONE);
   ControlWindow->set_resizable(true);
   ControlWindow->add(*MainVBox);
   Heading_label->show();
   label30->show();
   entry1->show();
   hbox18->show();
   label31->show();
   label32->show();
   hbox19->show();
   label33->show();
   item_res_sqcif->show();
   item_res_qsif->show();
   item_res_qcif->show();
   item_res_sif->show();
   item_res_cif->show();
   item_res_vga->show();
   menu2->show();
   menu_resolution_preview->show();
   hbox20->show();
   label34->show();
   image10->show();
   size_half->show();
   image11->show();
   size_original->show();
   image12->show();
   size_double->show();
   menu3->show();
   menu_resolution_snapshot->show();
   hbox21->show();
   label36->show();
   brightness->show();
   hbox23->show();
   label37->show();
   color->show();
   hbox24->show();
   label38->show();
   contrast->show();
   hbox25->show();
   label39->show();
   hue->show();
   hbox26->show();
   hseparator1->show();
   hseparator3->show();
   backlightcompensation->show();
   label47->show();
   dynnoise_none->show();
   dynnoise_low->show();
   dynnoise_medium->show();
   dynnoise_high->show();
   menu7->show();
   optionmenu5->show();
   hbox34->show();
   hseparator4->show();
   table1->show();
   label_basic_adjustments->show();
   label40->show();
   gamma->show();
   hbox27->show();
   label41->show();
   menuitem7->show();
   menuitem8->show();
   menuitem9->show();
   menuitem10->show();
   menu6->show();
   optionmenu4->show();
   alignment9->show();
   hbox28->show();
   label42->show();
   checkbutton2->show();
   hscale6->show();
   hbox29->show();
   label43->show();
   checkbutton3->show();
   hscale7->show();
   hbox30->show();
   label44->show();
   wb_automatic->show();
   wb_manual->show();
   wb_indoor->show();
   wb_outdoor->show();
   wb_flashlight->show();
   menu5->show();
   optionmenu3->show();
   alignment10->show();
   label45->show();
   hscale8->show();
   hbox32->show();
   label46->show();
   hscale9->show();
   hbox33->show();
   vbox6->show();
   hbox31->show();
   flickercompensation->show();
   table2->show();
   vbox5->show();
   label_advanced_adjustments->show();
   label_save_dir->show();
   save_directory->show();
   image5->show();
   label11->show();
   hbox7->show();
   alignment6->show();
   button1->show();
   hbox6->show();
   vbox3->show();
   label_image_saving_properties->show();
   notebook1->show();
   image2->show();
   label2->show();
   hbox2->show();
   alignment2->show();
   button_save_settings->show();
   image3->show();
   label3->show();
   hbox3->show();
   alignment3->show();
   button_restore_settings->show();
   image4->show();
   label4->show();
   hbox4->show();
   alignment4->show();
   button_restore_defaults->show();
   button_quit->show();
   Lower_hbuttonbox->show();
   Main_statusbar->show();
   MainVBox->show();
   ControlWindow->show();
   menu_resolution_preview->signal_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_menu_resolution_preview_changed));
   size_half->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_50p_activate));
   size_original->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_100p_activate));
   size_double->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_200p_activate));
   menu_resolution_snapshot->signal_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_menu_resolution_snapshot_changed));
   brightness->signal_value_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_brightness_changed));
   color->signal_value_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_color_changed));
   contrast->signal_value_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_contrast_changed));
   hue->signal_value_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_hue_changed));
   backlightcompensation->signal_toggled().connect(SigC::slot(*this, &ControlWindow_glade::on_backlightcomp_toggled));
   dynnoise_none->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_dynnoise_none_activate));
   dynnoise_low->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_dynnoise_low_activate));
   dynnoise_medium->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_dynnoise_medium_activate));
   dynnoise_high->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_dynnoise_high_activate));
   gamma->signal_value_changed().connect(SigC::slot(*this, &ControlWindow_glade::on_gamma_changed));
   menuitem7->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_compression_level_none_activate));
   menuitem8->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_compression_level_low_activate));
   menuitem9->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_compression_level_medium_activate));
   menuitem10->signal_activate().connect(SigC::slot(*this, &ControlWindow_glade::on_compression_level_high_activate));
   flickercompensation->signal_toggled().connect(SigC::slot(*this, &ControlWindow_glade::on_flickercomp_toggled));
   button_save_settings->signal_clicked().connect(SigC::slot(*this, &ControlWindow_glade::cb_save_user_settings));
   button_restore_settings->signal_clicked().connect(SigC::slot(*this, &ControlWindow_glade::cb_restore_user_settings));
   button_restore_defaults->signal_clicked().connect(SigC::slot(*this, &ControlWindow_glade::cb_restore_factory_defaults));
   button_quit->signal_clicked().connect(SigC::slot(*this, &ControlWindow_glade::gtk_main_quit));
}

ControlWindow_glade::~ControlWindow_glade()
{  delete _data;
}
